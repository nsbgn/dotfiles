#!/usr/bin/env python3
# Instead of switching between previous/next workspaces, this script provides 
# commands to additionally drop you into the empty workspaces in between.
#
# To make sure that the workflows are tightly packed, we move to the 
# lowest-numbered empty workflow if we are on its predecessor/successor 
# workspace, and otherwise use `workspace next/prev` as normal.

import sys
from i3ipc import Connection, Event  # type: ignore

def find_empty(workspaces: list) -> tuple[int, int, int]:
    # Return a tuple containing the predecessor/empty/successor workspaces
    for counter, ws in enumerate(workspaces, start=1):
        i = ws.num
        if counter != i or not ws.nodes:
            return (counter - 1 or len(workspaces), counter, i)
    n = len(workspaces)
    return (n, n + 1, 1)

if __name__ == "__main__":
    try:
        dir = sys.argv[1]
    except IndexError:
        sys.stderr.write("Needs argument\n")
        exit(1)

    conn = Connection()
    tree = conn.get_tree()
    workspaces = tree.workspaces()
    cur = tree.find_focused().workspace().num
    pre, empty, succ = find_empty(workspaces)

    if cur != empty and (
            (dir == 'next' and cur == pre) or (dir == 'prev' and cur == succ)):
        conn.command(f"workspace number {empty}")
    else:
        conn.command(f"workspace {dir}")
