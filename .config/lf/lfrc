# Configuration ##############################################################

set shell sh # interpreter for shell commands (needs to be POSIX compatible)
set shellopts '-eu' # Safer shell commands
set ifs "\n" # split $fs and $fx properly because default file sep is newline
# set ratios 1:3:3 # set ratio of panes
#set ratios 3:6 # set ratio of panes
set timefmt "2006-01-02 Mon 15:04" # set time format
#set color256 on # surn on colors
set previewer ~/.config/lf/preview.sh # previewer script
set scrolloff 10 # leave some space at the top and the bottom of the screen
#set  promptfmt "\033[32;1m%u@%h\033[0m:\033[34;1m%d\033[0m\033[1m%f\033[0m"

set findlen 2
#set noanchorfind
set incsearch
#cmap <esc> cmd-enter
#cmap <enter> open
set hiddenfiles .*:__pycache__:*.egg-info:!~/dotfiles/*:node_modules


# Dynamically set number of columns
%{{
    w=$(tput cols)
    if [ $w -le 100 ]; then
        lf -remote "send $id set ratios 4:6"
    else
        lf -remote "send $id set ratios 1:3:3"
    fi
}}

# Commands ###################################################################

# Move current file or selected files to trash folder
cmd trash ${{
    whiptail \
        --yesno "Are you sure you want to delete file(s)?" 10 35 --defaultno \
        && gio trash $fx
}}

# Creating a new directory or file
cmd mkfile %add "$(echo $* | tr ' ' '\ ')"
cmd open ${{
    case $f in
        *.md|*.txt|*.py|*.ttl)
            echo $EDITOR \"$f\" | bash -is
            ;;
        *.csv)
            visidata --use-default-colors "$f"
            ;;
        *.dot)
            xdot "$f" 2>&1 >/dev/null &
            ;;
        *)
            ~/.config/lf/open.sh "$f"
            ;;
        esac
}}
cmd view ${{ ~/.config/lf/open.sh "$f" --view }}

# show disk usage
#cmd usage :echo !{{du -hs . | more}}<CR>

# Show directory in window title
cmd on-cd &{{
    # '&' commands run silently in background (which is what we want here),
    # but are not connected to stdout.
    # To make sure our escape sequence still reaches stdout we pipe it to /dev/tty
    printf "\033]0;📁 $(pwd | sed "s|$HOME|~|")\007" > /dev/tty
}}
on-cd # also run at startup

# Jump to a file using fzf
cmd fzf_jump ${{
    res="$(fdfind . ~ --type d --exec stat --printf='%Y\t%n\n' \
    | sort --numeric --reverse \
    | cut -f2- \
    | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ]; then
        cmd="cd"
    else
        cmd="select"
    fi
    lf -remote "send $id $cmd \"$res\""
}}
map gj :fzf_jump


# Search the content of files under the current directory and select them using
# fzf and ripgrep
# Adapted from: https://github.com/junegunn/fzf#3-interactive-ripgrep-integration
cmd fzf_search ${{
    res="$( \
        RG_PREFIX="rg --column --line-number --no-heading --color=always \
            --smart-case "
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}
map gs :fzf_search

# Keyboard mappings ##########################################################

map <esc> quit
map <enter> open
map ~ cd ~
map t $bash
map x trash
map X cd ~/.local/share/Trash
map a push :mkfile<space>
# map e $echo $EDITOR $f | sh -is

map ol cd ~/library
map on cd ~/notes
map op cd ~/projects
map ow cd ~/work

# show documentation (overrides 'search-back' command)
map ? $lf -doc | less
