source $VIMRUNTIME/defaults.vim

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Plugins
call plug#begin()

    " Work with GPG-encrypted files
    Plug 'https://github.com/jamessan/vim-gnupg.git'

    " Sets working directory to project root
    Plug 'https://github.com/airblade/vim-rooter.git'

    " Browse within vim using the `lf` file manager
    " This is commented out because the LF() function below does not have the
    " issue that new tabs are highlighted incorrectly
    "Plug 'https://github.com/ptzz/lf.vim'

    " Asynchronous linting
    "Plug 'prabirshrestha/async.vim.git'
    "Plug 'prabirshrestha/vim-lsp.git'

    " Check code syntax
    "Plug 'https://github.com/vim-syntastic/syntastic.git'

    " Interactive Haskell development
    "Plug 'https://github.com/bitc/vim-hdevtools.git'

    " Highlight Pandoc-flavoured Markdown
    Plug 'https://github.com/vim-pandoc/vim-pandoc-syntax.git' 

    " Highlight jq scripts
    Plug 'https://github.com/vito-c/jq.vim'

    " Highlight ledger/hledger journals
    Plug 'https://github.com/ledger/vim-ledger', { 'tag': 'v1.2.0' }

    " Show git/svn changes
    Plug 'https://github.com/mhinz/vim-signify.git'

    " Git wrapper to show things like blame
    Plug 'https://github.com/tpope/vim-fugitive.git'

call plug#end()

" Width is 79 characters by default
set textwidth=79

" Show column number, line number and relative position in status line
set ruler

" Show line numbers in left margin
set number

" Indentation behaviour
set autoindent " Copy indentation from previous line
set expandtab " Convert tabs to spaces
set shiftwidth=4 " Number of characters for indentation (> and <)
set softtabstop=4 " Tab and backspace insert and delete correct number of spaces

" Do not automatically put two spaces after a sentence
set nojoinspaces

" Backspace over indentations
set backspace=indent,eol,start

" Move to previous/next line when pressing left/right at beginning/end
set whichwrap=<,>,h,l,[,]

" Show completion menu and, on tab, complete to the longest common command
set wildmenu
set wildmode=longest,list,full

" Copy to system clipboard by default
set clipboard=unnamedplus

" Turn off background on the sign column (except when there are signs)  
highlight SignColumn ctermbg=NONE cterm=NONE guibg=NONE gui=NONE


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" File-specific configuration

if has("autocmd")
    au BufRead /tmp/mutt-* set tw=72

    "au FileType haskell nnoremap <buffer> <silent> <F1> :HdevtoolsInfo<CR>
    "au FileType haskell nnoremap <buffer> <F2> :HdevtoolsType<CR>
    "au FileType haskell nnoremap <buffer> <silent> <F3> :HdevtoolsClear<CR>

    augroup pandoc_syntax
        au! BufNewFile,BufFilePre,BufRead *.md set filetype=markdown.pandoc
        autocmd FileType markdown.pandoc setlocal conceallevel=0
        autocmd FileType markdown.pandoc setlocal textwidth=78
        autocmd FileType markdown.pandoc setlocal formatoptions+=a formatoptions+=w
    augroup END

    augroup latex    
        au! BufNewFile,BufRead,BufNewFile *.tex set filetype=tex
        autocmd FileType tex setlocal conceallevel=0
        autocmd FileType tex setlocal textwidth=78
        autocmd FileType tex setlocal formatoptions+=a formatoptions+=w
    augroup END

endif


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Use lf to select and open file(s) in vim (adapted from ranger).

function! LF(bang)
    let temp = tempname()
    exec 'silent !lf -selection-path=' . shellescape(temp) . ' ' . shellescape(expand('%:p:h'))
    if !filereadable(temp)
        redraw!
        return
    endif
    let names = readfile(temp)
    if empty(names)
        redraw!
        return
    endif
    if (a:bang) && !(line('$') == 1 && getline(1) == '')
        exec 'tabnew'
    endif
    exec 'edit ' . fnameescape(names[0])
    for name in names[1:]
        exec 'argadd ' . fnameescape(name)
    endfor
    redraw!
endfunction
command! -bar -bang LF call LF(<bang>0)


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

nmap z :LF!<cr>
nmap Z :LF<cr>
" open linked file under cursor in new tab. does not work within the
" buffer created by HdevtoolsInfo...?
nnoremap gF <C-W>gF


nmap ; :
nmap t :tabnew<CR>
nmap . :tabnext<CR>
nmap , :tabprevious<CR>

" Insert lines
nmap = o<Esc>79a=<Esc>0
nmap - o<Esc>79a-<Esc>0
nmap ~ o<Esc>79a~<Esc>0
